#pragma once
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

/*
*@brief Функция которая меняет порядок битов в двоичной записи числа на противоположный
*@param x - число, биты в котором будет записаны в обратном порядке
*@param bitSize - размер числа в двоичной системе счисления
*@return число с инвертированным порядком бит
*/
unsigned int reverseBits(unsigned int x, int bitSize);

/*
*@brief Функция которая делает из числа в дяситичной системе счисления вектор, с двоичной записью этого числа
*@param number - число, которое будет пребразованно в двоичную систему
*@param N - число битов которое будет в финальном векторе (если исходное число короче, то дополняется незначащими нулями)
*@return Вектор с числом в двоичном записи
*/
std::vector<int> decimalToBinaryVector(int number, int N);

/*
*@brief Функция которая возводит число в степень по модулю
*@param base - основание степени
*@param exp - показатель степени
*@param mod - модуль по которому считается число
*@return число в степени по модулю
*/
size_t modExp(size_t base, int exp, size_t mod);


/*
*@brief Функция выполняющая быстрое преобразование Фурье
*@param a - вектор точек значения в которых необходимо найти
*@param w - примитивный корень из 1
*@param p - число по модулю которого выполняется преобразование
*@return вектор со значениями в заданных точках
*/
static std::vector<int> FFT(const std::vector<int>& a, size_t w, size_t p);

/*
*@brief Функция выполняющая обратное быстрое преобразование Фурье
*@param a - вектор значенией для которых надо найти точки, в который это значение принимается
*@param wRev - обратный элемент примитивного корень из 1
*@param p - число по модулю которого выполняется преобразование
*@param nInverse - обратный элемент для количесва элементов в векторе значений в кольце вычетов по модулю p
*@return вектор со значениями в заданных точках
*/
std::vector<int> iFFT(const std::vector<int>& a, size_t wRev, size_t p, int nInverse);

/*
*@brief Функция которая делает из вектора с двоичной записью числа десятичное число
*@param bineryVector - вектор с двоичной записью числа
*@return число в десятичной системе счисления
*/
int binaryToDecimal(const std::vector<int>& binaryVector);

/*
*@brief Функция разделяющая вектор на подвектора
*@param binaryVector - исходный вектор в двоичной системе счисления который необходимо разбить
*@param numberOfGroups - количество вектором на которое необходимо разбить исходный
*@param digits - кол-во элементов в каждом из подвекторов
*@return вектор с векторами, содержащими части исходных данных
*/
std::vector<std::vector<int>> splitBinaryVector(const std::vector<int>& binaryVector, int numberOfGroups, int digits);

/*
*@brief Функция вычисляющая коэфициенты многочлена по модулю числа
*@param vector - вектор с коэффициентоми многочлена
*@param p - число по модулю которого происходят вычисления
*@return вектор с коэффициентами многочлена по модулю заданного числа
*/
std::vector<int> polinomByModulo(std::vector<int> vector, int p);

/*
*@brief Функция вычисляющая отрицательно обернутую свертку
*@param a - первый компонент для свертки
*@param b - второй компонент для свертки
*@param N - размерность векторов
*@return вектор с коэффициентами многочлена согласно отрицательно обернутой свертке
*/
std::vector<int> calculateNegativeConvolution(std::vector<int> a, std::vector<int> b, int N);

/*
*@brief Функция умножающая каждый элемент вектора на число в заданной степени
*@param psi - число на степени которого будут умножаться элементы вектора
*@param K - размерность вектора
*@return вектор с коэффициентами умноженными на степени psi
*/
std::vector<int> createPsiVectors(std::vector<int> vector, int psi, int K);

/*
*@brief Функция умножающая два числа методом Шенхаге-Штрассена
*@param first - первый множитель
*@param second - второй множитель
*@param N - желаемый размер вектора с двоичной записью множителей (степень 2)
*@return произведение двух чисел
*/
int SchonhageStrassen(int first, int second, int N);
